{
  "env": {
    "browser": true,
    "es2021": true
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "extends": ["plugin:react/recommended", "prettier"],
  "parserOptions": {
    "project": "tsconfig.json",
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": ["react", "react-hooks"],
  "rules": {
    // Default
    "curly": "error",
    "no-shadow": "error",
    "no-console": "error",
    "no-fallthrough": "error",
    "max-lines": ["error", 200],
    "max-statements": ["error", 50],
    "max-nested-callbacks": ["error", 4],
    "max-lines-per-function": ["error", 120],
    "no-unused-vars": [
      "error",
      {
        "varsIgnorePattern": "^_",
        "argsIgnorePattern": "^_",
        "caughtErrors": "none"
      }
    ],

    // React
    "react/jsx-no-bind": "error",
    "react/display-name": "error",
    "react/no-array-index-key": "error",
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",

    // React Hooks
    "react-hooks/exhaustive-deps": "warn"
  },
  "overrides": [
    {
      "files": ["*.test.{ts,tsx}"],
      "rules": {}
    },
    {
      "files": ["*.{ts,tsx}"],
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint/eslint-plugin"],
      "rules": {
        "@typescript-eslint/ban-types": "error",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "varsIgnorePattern": "^_",
            "argsIgnorePattern": "^_",
            "caughtErrors": "none"
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "variable",
            "types": ["boolean"],
            "format": ["PascalCase"],
            "prefix": ["is", "should", "has", "will"]
          }
        ]
      }
    }
  ]
}
